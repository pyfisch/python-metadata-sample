Metadata-Version: 2.1
Name: aws-cdk.aws-events-targets
Version: 1.92.0
Summary: Event targets for Amazon EventBridge
Home-page: https://github.com/aws/aws-cdk
Author: Amazon Web Services
License: Apache-2.0
Project-URL: Source, https://github.com/aws/aws-cdk.git
Description: # Event Targets for Amazon EventBridge
        
        <!--BEGIN STABILITY BANNER-->---
        
        
        ![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)
        
        ---
        <!--END STABILITY BANNER-->
        
        This library contains integration classes to send Amazon EventBridge to any
        number of supported AWS Services. Instances of these classes should be passed
        to the `rule.addTarget()` method.
        
        Currently supported are:
        
        * Start a CodeBuild build
        * Start a CodePipeline pipeline
        * Run an ECS task
        * Invoke a Lambda function
        * Publish a message to an SNS topic
        * Send a message to an SQS queue
        * Start a StepFunctions state machine
        * Queue a Batch job
        * Make an AWS API call
        * Put a record to a Kinesis stream
        * Log an event into a LogGroup
        * Put a record to a Kinesis Data Firehose stream
        * Put an event on an EventBridge bus
        
        See the README of the `@aws-cdk/aws-events` library for more information on
        EventBridge.
        
        ## Invoke a Lambda function
        
        Use the `LambdaFunction` target to invoke a lambda function.
        
        The code snippet below creates an event rule with a Lambda function as a target
        triggered for every events from `aws.ec2` source. You can optionally attach a
        [dead letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html).
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        import aws_cdk.aws_lambda as lambda_
        import aws_cdk.aws_events as events
        import aws_cdk.aws_sqs as sqs
        import aws_cdk.aws_events_targets as targets
        
        fn = lambda_.Function(self, "MyFunc",
            runtime=lambda_.Runtime.NODEJS_12_X,
            handler="index.handler",
            code=lambda_.Code.from_inline(f"exports.handler = {handler.toString()}")
        )
        
        rule = events.Rule(self, "rule",
            event_pattern=EventPattern(
                source=["aws.ec2"]
            )
        )
        
        queue = sqs.Queue(self, "Queue")
        
        rule.add_target(targets.LambdaFunction(fn,
            dead_letter_queue=queue
        ))
        ```
        
        ## Log an event into a LogGroup
        
        Use the `LogGroup` target to log your events in a CloudWatch LogGroup.
        
        For example, the following code snippet creates an event rule with a CloudWatch LogGroup as a target.
        Every events sent from the `aws.ec2` source will be sent to the CloudWatch LogGroup.
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        import aws_cdk.aws_logs as logs
        import aws_cdk.aws_events as events
        import aws_cdk.aws_events_targets as targets
        
        log_group = logs.LogGroup(self, "MyLogGroup",
            log_group_name="MyLogGroup"
        )
        
        rule = events.Rule(self, "rule",
            event_pattern=EventPattern(
                source=["aws.ec2"]
            )
        )
        
        rule.add_target(targets.CloudWatchLogGroup(log_group))
        ```
        
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: JavaScript
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Typing :: Typed
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved
Classifier: Framework :: AWS CDK
Classifier: Framework :: AWS CDK :: 1
Requires-Python: >=3.6
Description-Content-Type: text/markdown
